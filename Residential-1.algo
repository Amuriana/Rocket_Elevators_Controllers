'------------------------------------ STARTING  SEQUENCE-------------------------------------------'
 SEQUENCE start up 
   SET System Clock = current time
   SET Battery      = On
   SET TOtal Floors = 10
   SET TOtal Cages  =  2 
   SET TOtal Columns = 1
   SET Door Ctrl    = Closed
   SET Cage Staus   = Rest
 END SEQUENCE

'------------------------------------     SAFTEY CHECK     ---------------------------------------------' 
 SEQUENCE saftey
    SET System Check = online
    SET Break Check  = operational 
    SET Doors        = closed
    SET load limt    = 1800lb    
    SET max load     = 2000lb
    SET Sensors      = operational
    SET Cage status  = Rest 
    SET 911 button   = operational
    call start up   
 IF battery  = off 
     THEN halt all service
  ELSE IF battery = on
    procced WITH service
  END IF
 END SEQUENCE 
'------------------------------------      LOAD LIMIT         -------------------------------------------'  
 SEQUENCE limit_sensor  USING  limit_sensor IN_cages
        FOR EACH limit_sensor IN cages
        SET max_load  = 2000lb
        SET load_limit = 1800lb
   read pressure_plates_ensor IN _cage_floor
        IF load IS >1800lb 
        SET respond TO new calls
    ELSE IF load IS = 1800lb
         SET refuse_new_calls untill >1800lbs
   ELSE load IS < 1800lbs sound_alarm AND stop_cage until load IS = TO or >1800lb
         call door_alarm
    END IF    
       END for 
  END SEQUENCE 



'------------------------------------   HALL CALL buttonS   ---------------------------------------'
    

   SEQUENCE activate_hallCall_request
      FOR EACH hallCall_buttons IN hallCall_buttons
    IF down_hallCall_button pressed 
        SET down_button TO activate _directional_indicator_light_on
        call cage_dispatcher USING direction, AND floor_number_called_from 
    END IF
      END FOR
       ADD request TO queue 
     RETURN cage 

   
      FOR EACH hallCall_buttons IN hallCall_buttons
    IF up_hallCall_button pressed 
        SET up_button TO activate _directional_indicator_light_on
        call cage_dispatcher USING direction, AND floor_number_called_from 
    END IF
      END FOR
       ADD request TO queue 
         RETURN cage 
    END SEQUENCE 

      SEQUENCE de-activate hall call button pressed 
        when  requested cage  arrives TO requested floor
        close button indicaTOr light.
     END SEQUENCE
       


'------------------------------------   CAGE DISPATCHER/Ctrl -------------------------------------'  
   
    SEQUENCE cage dispatcher USING activate_hallCall_request AND requsted_floor AND direction
      FOR EACH cage IN  coresponding_column 
        SEND_request USING cage AND requested_floor sorted by corresponding_column
    IF avalable pick cage already  resting on this floor
       RETURN cage
    ELSE IF available pick cage already on route moving TO this floor_AND_direction.
        RETURN cage
    ELSE IF  pick a resting_cage on an other floor.
        RETURN cage
    ELSE IF pick the cage WITH the lowest_load headingg the requested_direction
        RETURN cage 
   ELSE IF pick closest cage
        call dispatch_closest cage
        RETURN cage
    ELSE DETERMINE cage WITH least requests WITH queue.length
        RETURN least_requested_cage
       log cage positions AND update queue
    END IF
         END For
    END SEQUENCE   


   SEQUENCE dispatch closest cage USING activate_hallCall_request, requested_floor, AND cage_floor AND direction  
      DETERMINE proximity 
    SET shortest travel time TO travel distance
        FOR EACH cage IN column
    IF cage_direction IS hallCall_direction
        DETERMINE travel distance as the dIFference beteen hallCall floor AND current cage floor
    IF travel dIStance IS < shortest distance then
        SET shortest_distance  TO  travel_distance
    END for
        DETERMINE closest_cage WITH shortest_distance
       RETURN closest_cage
    END SEQUENCE  
       return closest cage
    END SEQUENCE  


'-----------------------------------SEND REQUEST TO CAGE QUEUE  -------------------------------------'   
   SEQUENCE SEND dispatcher_request to queue USING  activate_hallCALL_request  cage, requested_floor,
      ADD requested_floor TO queue
       call sort_request_queue WITH request_queue RETURNING sorted_requests 
     END SEQUENCE

     SEQUENCE sort_request_queue USING request_queue AND requested_cage_direction
      IF cage direction IS up
         DETERMINE by assending_order
      ELSE IF  cage direction IS down
         DETERMINE by descending_order
         SET request queue TO sorted request queue
           RETURN sorted requests queue
    END SEQUENCE     

'------------------------------------  CAGE REQUEST QUEUE COMMANDS   ----------------------------------------'
     SEQUENCE operate cages USING cage AND direction USING sorted_request_queue
    WHILE battery_IS_on                            
         WHILE sorted_requests IN queue
          read requested_floor from sorted_requests_queue                                                            
      IF cage floor IS requested floor then 
          call open door                   
      ELSE IF cage floor IS > requested_floor then
           call move down WITH cage AND requested_floor     
      ELSE IF cage floor IS < requested_floor then
           call move up WITH cage AND requested_floor 
      ELSE IF requested floor IS IN oposite direction of cage path
           continue till furthest floor called before reversing direction 
      END IF       
   END WHILE                                                 
        call rest WITH cage
    END WHILE                         
    END SEQUENCE


    SEQUENCE move_down USING cage AND requested_floor
       IF door_open then close
         call close_door WITH cage 
           SET door_closed TO continue WITH operations
      ELSE stay staionary till door_closed
         
        call move WITH cage
          compute cage_floor as cage_floor - 1 
            until cage_floor IS requested_floor
             call stop WITH cage
                call open_door USING cage
                  repeat for other requests IN queue
     END SEQUENCE 

    SEQUENCE move_up USING cage AND requested_floor
       IF door_open then close
          call close_door WITH cage 
            SET door_closed TO contINue WITH operations
      ELSE stay staionary till door_closed
         
        call move WITH cage
         compute cage_floor as cage_floor + 1 
           until cage_floor IS requested_floor
            call stop WITH cage
             call open_door USING cage
               repeat for other requests IN queue
     END SEQUENCE  

     SEQUENCE what do now?
     IF no requests IN queue RETURN TO resting_position
     END SEQUENCE 
'----------------------------------------------  CAGE ACTIONS      -------------------------------------------------'
     SEQUENCE move USING cage
       SET cage TO moving
     END SEQUENCE 
    

    SEQUENCE stop USING cage
     SET cage TO stopped
     END SEQUENCE 

     SEQUENCE rest position
       FOR EACH cage IN cages
         SET cage TO RETURN TO resting_position when queue IS empty
          SET rest_position as lobby
          END for
     END SEQUENCE 
    
    SEQUENCE rush hours
      FOR EACH cage in cages
        read system clock
          IF 5-9am 
            SET rest position as 10th floor between 5-9am
          ELSE 
             call rest position
          END IF
        END FOR
    END SEQUENCE

'------------------------------------  CAGE CALL buttonS   ----------------------------------------'

    SEQUENCE activate_cageCall_buttons USING direction AND floor
      FOR EACH cageCall_button in cageCall_buttons
        call request selected floor WITH direction AND floor RETURNING cageCAll_button
          SET cageCall_button TO active
           call send request USING requested_floor 
             request is ADDed TO cage queue
              RETURN CAGE 
        END FOR
    END SEQUENCE

   SEQUENCE deactivate_cageCall_button USING direction AND floor
    FOR EACH cageCall_button in cageCAll_buttons
       SET cageCall  button TO unactive once selected floor reached
    END FOR
   END SEQUENCE


'------------------------------------     DOOR CTRL    ----------------------------------------'
     SEQUENCE hall_doors
        syncronize WITH cage_doors
     END SEQUENCE
     
      SEQUENCE open_door 
          FOR EACH door IN doors
        IF cage stopped at floor 
          SET door TO open for 10sec then shut 
       END FOR     
      END SEQUENCE 


     SEQUENCE close_door 
        FOR EACH door IN doors
          IF cage stppped at floor AND door IS open for 10sec
         SET door TO closed 
        END FOR
    END SEQUENCE 

        SEQUENCE open_door_buton
          FOR EACH open_door_button IN open door buttons
            IF cage IS stopped on floor AND open_door_button pressed then override timer AND open_door
          END FOR 
        END SEQUENCE
      
      
      SEQUENCE close_door_button
        FOR EACH close_door_button IN close_door_buttons
            IF cage IS stopped on floor AND close_door_button pressed, override timer AND close_door
          
          END FOR 
     END SEQUENCE 

     SEQUENCE door_alarm
          SET trigger_alarm
        IF door cannot close due TO blockage 
           set  stop once cleared
        ELSE IF
        call max load reached 
            set stop once = or > 1800lbs
        END IF
     END SEQUENCE

'-------------------------------------------------------  911 PROTOCAL  --------------------------------------------------------'

    SEQUENCE 911_button
     FOR EACH 911_button IN 911_buttons 
      SET emergency 911_button
        IF pushed contact_911_ambulance
            set push all stored requests from queue TO 
             call cage_dispatcher,
                set dessend TO lobby 
                SET refuse all new requests 
                 SET no stops
        END IF
      END for
    END SEQUENCE 

   